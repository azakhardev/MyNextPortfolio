generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model entries {
  id                  Int                   @id @default(autoincrement())
  slug                String                @db.VarChar(255)
  media_id            Int?
  preview_image       String?               @db.VarChar(2048)
  date                DateTime?             @db.Date
  technology          String?               @db.VarChar(255)
  favorite            Boolean?              @default(false)
  type                entrytype
  media               media?                @relation(fields: [media_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  entrieslocalization entrieslocalization[]
  entryparagraphs     entryparagraphs[]
  links               links[]
  tags                tags[]
}

model entrieslocalization {
  id           Int       @id @default(autoincrement())
  entry_id     Int
  lang         languages
  title        String?   @db.VarChar(255)
  subtitle     String?   @db.VarChar(511)
  preview_text String?
  body         String?
  entries      entries   @relation(fields: [entry_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model entryparagraphs {
  id                          Int                           @id @default(autoincrement())
  entry_id                    Int
  media_id                    Int?
  entries                     entries                       @relation(fields: [entry_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  media                       media?                        @relation(fields: [media_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  entryparagraphslocalization entryparagraphslocalization[]
}

model entryparagraphslocalization {
  id                 Int             @id @default(autoincrement())
  entry_paragraph_id Int
  lang               languages
  title              String?         @db.VarChar(255)
  body               String?
  entryparagraphs    entryparagraphs @relation(fields: [entry_paragraph_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model links {
  id       Int     @id @default(autoincrement())
  entry_id Int
  name     String  @db.VarChar(511)
  url      String  @db.VarChar(2048)
  entries  entries @relation(fields: [entry_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model media {
  id              Int               @id @default(autoincrement())
  type            mediatype
  name            String            @db.VarChar(255)
  entries         entries[]
  entryparagraphs entryparagraphs[]
  mediasources    mediasources[]
}

model mediasources {
  id       Int    @id @default(autoincrement())
  media_id Int
  path     String @db.VarChar(2048)
  media    media  @relation(fields: [media_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model tags {
  id       Int      @id @default(autoincrement())
  entry_id Int
  type     tagtypes
  value    String   @db.VarChar(255)
  entries  entries  @relation(fields: [entry_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model logs {
  id       Int      @id @default(autoincrement())
  time     DateTime @default(now()) @db.Timestamp(6)
  type     logstype
  message  String?  @db.VarChar(2048)
  username String?  @db.VarChar(255)
}

model requests {
  id        Int      @id @default(autoincrement())
  timestamp DateTime @default(now()) @db.Timestamp(6)
  name      String?  @db.VarChar(511)
  email     String?  @db.VarChar(320)
  phone     String?  @db.VarChar(16)
  message   String?
}

enum entrytype {
  JOB
  PROJECT
}

enum languages {
  CS
  EN
}

enum logstype {
  LOGIN
  LOGOUT
  NAVIGATION
}

enum mediatype {
  IMAGE
  GALLERY
  VIDEO
}

enum tagtypes {
  TECHNOLOGY
  COMPLETION_DATE
  IMPLENETATION
  DIFFICULTY
  LENGTH
  TYPE
}
